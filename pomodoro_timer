import React, { useState, useEffect } from 'react';
import { Flame, Star } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';

const GamifiedPomodoro = () => {
  const [minutes, setMinutes] = useState(25);
  const [seconds, setSeconds] = useState(0);
  const [isActive, setIsActive] = useState(false);
  const [streak, setStreak] = useState(0);
  const [consecutiveCount, setConsecutiveCount] = useState(0);
  const [message, setMessage] = useState("Complete 3 Pomodoros for a streak bonus! 🎯");
  const [lastCompleted, setLastCompleted] = useState(Date.now());

  const messages = {
    start: ["Time to grow! 🌱", "Let's focus! 🎯", "Fresh start! 🍅"],
    complete: ["Ripe and ready! 🍅", "Great harvest! 🌟", "Perfectly done! 👏"],
    streak: ["Triple tomato bonus! 🍅🍅🍅", "Growing champion! 🌟", "Master gardener! 👑"]
  };

  useEffect(() => {
    let interval;
    if (isActive) {
      interval = setInterval(() => {
        if (seconds === 0) {
          if (minutes === 0) {
            handleComplete();
          } else {
            setMinutes(minutes - 1);
            setSeconds(59);
          }
        } else {
          setSeconds(seconds - 1);
        }
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [isActive, minutes, seconds]);

  const handleComplete = () => {
    const now = Date.now();
    const timeSinceLastCompleted = now - lastCompleted;
    const isConsecutive = timeSinceLastCompleted <= 1000 * 60 * 30;
    
    setIsActive(false);
    setMinutes(25);
    setSeconds(0);
    setLastCompleted(now);

    if (isConsecutive) {
      const newCount = consecutiveCount + 1;
      setConsecutiveCount(newCount);
      
      if (newCount === 3) {
        setStreak(streak + 3);
        setMessage(messages.streak[Math.floor(Math.random() * messages.streak.length)]);
        setConsecutiveCount(0);
      } else {
        setStreak(streak + 1);
        setMessage(messages.complete[Math.floor(Math.random() * messages.complete.length)]);
      }
    } else {
      setConsecutiveCount(1);
      setStreak(streak + 1);
      setMessage(messages.complete[Math.floor(Math.random() * messages.complete.length)]);
    }
  };

  const toggleTimer = () => {
    if (!isActive) {
      setMessage(messages.start[Math.floor(Math.random() * messages.start.length)]);
    }
    setIsActive(!isActive);
  };

  return (
    <div className="flex flex-col items-center space-y-4">
      {/* Tomato Shape */}
      <div className={`relative w-64 h-64 rounded-full ${isActive ? 'bg-red-500' : 'bg-red-400'} 
        transform transition-all duration-300 hover:scale-105 shadow-lg
        flex items-center justify-center
        before:content-[''] before:absolute before:top-0 before:left-1/2 
        before:w-16 before:h-8 before:bg-green-600 before:-translate-x-1/2 before:-translate-y-2 
        before:rounded-full before:rotate-45`}>
        
        {/* Timer Display */}
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2
          bg-white bg-opacity-90 rounded-full w-40 h-40 
          flex flex-col items-center justify-center shadow-inner">
          <div className="text-4xl font-mono font-bold text-gray-800">
            {String(minutes).padStart(2, '0')}:{String(seconds).padStart(2, '0')}
          </div>
          <div className="text-sm text-gray-600 mt-2 max-w-[120px] text-center">
            {message}
          </div>
        </div>

        {/* Controls */}
        <Button
          onClick={toggleTimer}
          variant={isActive ? "destructive" : "default"}
          className="absolute -bottom-6 left-1/2 transform -translate-x-1/2"
        >
          {isActive ? 'Pause' : 'Start'}
        </Button>
      </div>

      {/* Streak Display */}
      <div className="flex items-center space-x-3 bg-white rounded-full px-4 py-2 shadow-md">
        <Flame className="w-5 h-5 text-orange-500" />
        <span className="text-lg font-bold">{streak}</span>
        <div className="flex space-x-1">
          {[...Array(consecutiveCount)].map((_, i) => (
            <Star key={i} className="w-4 h-4 text-yellow-400 fill-yellow-400" />
          ))}
          {[...Array(3 - consecutiveCount)].map((_, i) => (
            <Star key={i + consecutiveCount} className="w-4 h-4 text-gray-300" />
          ))}
        </div>
      </div>
    </div>
  );
};

export default GamifiedPomodoro;
